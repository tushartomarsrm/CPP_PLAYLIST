    //Half Pyramid Pattern
    // Print half pyramid pattern
    // * 
    // * *
    // * * *
    // * * * *
    // * * * * *
    // for (int col = 0; col <= row; col++)

    // Print inverted half pyramid pattern
    // * * * * * 
    // * * * *
    // * * *
    // * *
    // *
    //for (int col = 0; col < n - row; col++)

    // Hollow Inverted Half Pyramid
    // * * * * * 
    // *     *
    // *   *
    // * *
    // *
    //if (col == 0 || row == 0 || col == n - row - 1)

    // Full Pyramid
    //      *
    //     * *
    //    * * *
    //   * * * *
    //  * * * * *
    // for (int col = 0; col < n - row; col++)
    //     {
    //         cout << " ";
    //     }
    // for (int col = 0; col <= row; col++)
    //     {
    //         cout << "* ";
    //     }

    // Inverted Full Pyramid
    //  * * * * *
    //   * * * *
    //    * * *
    //     * *
    //      *
    //for (int col = 0; col <= row; col++)
    // {
    //     cout << " ";
    // }
    // for (int col = 0; col <  n - row; col++)
    // {
    //     cout << "* ";
    // }

    // Hollow Full Pyramid
    //      *
    //     * *
    //    *   *
    //   *     *
    //  * * * * *
    // First inner loop for spaces
    // for (int space = 1; space <= n - row; space++) {
    //     cout << " ";
    // }
    // // Second inner loop for stars and spaces
    // for (int star = 1; star <= 2 * row - 1; star++) {
    //     if (star == 1 || star == 2 * row - 1 || row == n) {
    //         cout << "*";
    //     } else {
    //         cout << " ";
    //     }
    // }

    // Print Numeric half pyramid pattern
    // 1 
    // 1 2
    // 1 2 3
    // 1 2 3 4
    // 1 2 3 4 5
    // for (int col = 0; col <= row; col++) // Loop through each column in the current row
    //     {
    //         cout << col + 1 << " "; // Print the value of column number + 1, followed by a space
    //     }

    // Print inverted numeric half pyramid pattern
    //  1 2 3 4 5
    //  1 2 3 4
    //  1 2 3
    //  1 2
    //  1
    // for (int col = 0; col < n - row; col++) // Loop through each column in the current row
    // {
    //     cout << col + 1 << " "; // Print the value of column + 1, followed by a space
    // }

    // Print HollowNumericHalfPyramid.cpp
    // 1
    // 1 2
    // 1   3
    // 1     4
    // 1 2 3 4 5
    //if (col == 0 || row == n - 1)
    // {
    //     cout << col + 1<< " ";
    // }
    // else if (col == row)
    // {
    //     cout << row + 1<< " ";
    // }
    // else
    // {
    //     cout << "  ";
    // }

    // Print HollowInvertedNumericHalfPyramid
    // 1 2 3 4 5
    // 2     5
    // 3   5
    // 4 5
    // 5
    // if (row == 0)
    // {
    //     cout << col + 1 << " ";
    // }
    // else if (col == n - row - 1)
    // {
    //     cout << n << " ";
    // }
    // else if (col == 0)
    // {
    //     cout << row + 1 << " ";
    // }
    // else
    // {
    //     cout << "  ";
    // }
    

    // Print hollow rectangle pattern
    // * * * * * * * * * 
    // *               *
    // *               *
    // * * * * * * * * *
    //ouput : 
    //if (row == 0 || row == ROWS - 1 || col == 0 || col == COLS - 1)

    
        
    