//to roate a matrix by 90 degree (array) transponse the matrix and reverse its rows accordingly
//"ate","eat","tea"] - anagrams
//The number of unique paths from the top-left corner to the bottom-right corner of an m x n grid is given by the formula:
C(m+n-2, n-1) = (m+n-2)! / ((n-1)! * (m-1)!)
//if at any arr[i][j] obstacle is there than use dp :
dp[0][0] =1 if no obstacle 
dp[i][0] = obstacleGrid[i][0] == 0 && dp[i-1][0] == 1 ? 1 : 0; //first coloumn
dp[0][j] = obstacleGrid[0][j] == 0 && dp[0][j-1] == 1 ? 1 : 0; //first row
after this from i+1 to last wor and j+1 to last row
if no obstacle at i,j : dp[i][j] = dp[i-1][j] + dp[i][j-1];
else if obstacle dp[i][j]=0
ans is dp[i-1]dp[j-1]

//no of sq in squares grid - 
sigma of nsq
//rectangles (nC2)^2

//mid distance -
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
class Solution {
    public int minDistance(String word1, String word2) {
        int l1 = word1.length();
        int l2 = word2.length();
        int[][] dp = new int[l1+1][l2+1];
        
        // Base cases
        // Initializing First row
        for(int i=0; i <= l2; i++)
            dp[0][i] = i;        
        // Initializing First col
        for(int i=0; i <= l1; i++)
            dp[i][0] = i;
        
        for(int i=1; i <= l1; i++){
            for(int j=1; j <= l2; j++){
                if(word1.charAt(i-1) == word2.charAt(j-1))
                    dp[i][j] = dp[i-1][j-1];
                else
                    dp[i][j] = 1 + Math.min(dp[i-1][j-1], // replace
                                            Math.min(dp[i-1][j], // delete
                                                     dp[i][j-1]) // insert
                                           ); 
            }
        }
        
        return dp[l1][l2];
    }
}



//to validate ONLY FILLED cells of sudoku (NOT ALL CELLS)
Set seen = new HashSet();
    for (int i=0; i<9; ++i) {
        for (int j=0; j<9; ++j) {
            if (board[i][j] != '.') {
                String b = "(" + board[i][j] + ")";
                if (!seen.add(b + i) || !seen.add(j + b) || !seen.add(i/3 + b + j/3))
                    return false;
            }
        }
    }

//search in sorted elements 
binary search - while(start <= end)

//search number of total occurnece or first occurence or last occurence of a given number in sorted array
apply binary search using this change - 
while (start<=end){ if(arr[mid] == x){
	ans = mid; //final value of ans is the value of left or right correspondingly
	findRightOcc ? start = mid + 1 : end = mid - 1;
}..} return ans;//outside while loop
  // here we run this above function two time and when findRightOcc is true it returns the the rightmost 
    occurence of x than check if(rightOcc == -1) return 0; if not -1 than if findRightOcc is false returns leftmost occurence and our ans will be right-left+1

//find missing in sorted -
{1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12} output : 8
use binary seach such that 
        if (v[mid] - mid != 1)
        {   end = mid - 1; // Update the end index to search the left half
            missingElement = mid + 1; // Update the missing element to 'mid + 1'
        }
        else {start = mid + 1; }

// peakIndexIn INCREASING DECREASING MountainArray
   Input: arr = [0,2,3,4,2,1]
   Output: 4
    int mid = start + (end - start) / 2;  
    if (end - start == 1) {
        return start;
    }
    else if (arr[mid] > arr[mid - 1]) //mid = mid-1 ka case ho hi nhi skta esmai
    {
        start = mid; 
    }
    else
    {
                end = mid; 
    }
     }
        return start;

//PIVOT ELEMENT IN rotated sorted array
(0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
now find the index of target value in this array ex input = 6  output = 2 (here we have to find pivot first outselves)
      int search(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            // If the left half is sorted
            if (nums[left] <= nums[mid]) {
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } 
            // If the right half is sorted
            else {
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return -1;

//square root
class Solution {
    public int mySqrt(int x) {
        if (x == 0) return 0; // handle edge case
        long r = x;
        while (r * r > (long) x) {
            r = (r + x / r) / 2;
        }
        return (int) r;
    }
  or we can apply binary serach here}

//The first integer of each row is greater than the last integer of the previous row.
 1  3  5  7
 10 11 16 20
 23 30 34 60
 find index of x in this in O(log(r*c))
answer - 
 n = row*col; 
1. Calculate the total number of elements (n) as row * col.
2. Use binary search:
    - Calculate the middle index (mid) as n / 2.
    - Calculate the row index as row = mid / col.
    - Calculate the column index as colIndex = mid % col.

//two integer number division
def divide(self, dividend:int, divisor:int)->int:
        if dividend == -2**31 and divisor == -1:
            return 2**31 - 1

        start, end = 0, abs(dividend)
        quotient = 0

        while start <= end:
            mid = start + (end - start) // 2
            temp = mid * abs(divisor)

            if temp == abs(dividend):
            #check if any one is -ve than output is also -ve
                if (dividend < 0 and divisor > 0) or (dividend > 0 and divisor < 0): 
                    return -mid
                return mid
            elif temp < abs(dividend):
                quotient = mid
                start = mid + 1
            else:
                end = mid - 1

        if (dividend < 0 and divisor > 0) or (dividend > 0 and divisor < 0):
            return -quotient
        return quotient

//// Given a sorted array arr[] of size N, some elements of array are moved to either of the adjacent positions, 
i.e., arr[i] may be present at arr[i+1] or arr[i-1] i.e. arr[i] can only be swapped with either arr[i+1] or 
arr[i-1]. The task is to search for an element in this array.
Examples : 
Input: arr[] =  {10, 3, 40, 20, 50, 80, 70}, key = 40
Output: 2 
Explanation: Output is index of 40 in given array i.e. 2

Input: arr[] =  {10, 3, 40, 20, 50, 80, 70}, key = 90
Output: -1
Explanation: -1 is returned to indicate the element is not present

ans apply binary search such that
    compare target with mid, mid-1, mid+1 parallely and return mid or mid-1 or mid+1 accordingly 
    (NOTE IN ABOVE FIRST VALIDATE THAT mid-1 or mid+1 exists)
    < ---  use  right = mid-2;
    else   left = mid+2


// find single non duplicate in sorted array -
Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:
Input: nums = [3,3,7,7,10,11,11]
Output: 10
public int singleNonDuplicate(int[] nums) {
        int left = 0, right = nums.length-1;
        while(left < right){
            int mid = (left + right)/2;
            if( (mid % 2 == 0 && nums[mid] == nums[mid +1]) || (mid %2 == 1 && nums[mid] == nums[mid - 1]) )
                left = mid + 1;
            else
                right = mid;
        }
        return nums[left];
    } 

//["00:24","21:43"] find minimum difference between any two time
output use formulae - hour*60+min than sort all times and find min difference

//remove all occurence of part from s 
Input: s = "daabcbaabcbc", part = "abc"
Output: "dab"
int index = s.indexOf(part);
while (index != -1) {
  s = s.substring(0, index) + s.substring(index + part.length());
  index = s.indexOf(part);
}
return s;

//total number of palidromic substring in a string 
ex aaa
output 6 (a a a aa aa aaa)
int count = 0;
public int countSubstrings(String s) {
      if (s == null || s.length() == 0) return 0; 
      for (int i = 0; i < s.length(); i++) { // i is the mid point
            extendPalindrome(s, i, i); // odd length;
            extendPalindrome(s, i, i + 1); // even length
      }  
      return count;
    }
    private void extendPalindrome(String s, int left, int right) {
        while (left >=0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            count++; left--; right++; //use this logic too to find the LARGEST PALINDROMEIC SUBSTRING like below
        }
            /*
            if(maxLen < right - left - 1) {
            maxLen = right - left - 1;
            lo = left+1; //final ans willl be s(lo,lo+maxlen);
            }*/
        
    }


// sort s according to the order of char in order string.
    private static String str;
    private static Comparator<Character> comparator = (char1, char2) -> Integer.compare(str.indexOf(char1), str.indexOf(char2));

    public String customSortString(String order, String s) {
        str = order;
        char[] charArray = s.toCharArray();
        Arrays.sort(charArray, comparator);
        return new String(charArray);
    }

// Head Recursion: 
void headRecursion(int n)
{
    // base case
    if (n == 0) return;
    headRecursion(n - 1);
    cout << n << " ";
}
// Tail Recursion: 
void headRecursion(int n)
{
    // base case
    if (n == 0) return;
    cout << n << " ";
    headRecursion(n - 1);
}

//int ans = climbStairs(n-1) + climbStairs(n-2);

// Input: "abc"
 Output: (empty string), a, b, c, ab, ac, bc, abc
void findSubsequencesOfString(String input, String output, int index) {
    if (index >= input.length()) {
        System.out.println("=> " + output);
        return;
    }
    findSubsequencesOfString(input, output + input.charAt(index), index + 1);
    findSubsequencesOfString(input, output, index + 1);
}


//int x = 2; // GLOBAL VARIABLE
void fun()
{
    int x = 60;        // LOCAL VARIABLE: 
    cout << ::x << endl; // This will print the global 'x', now having a value of 40.
}

//public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        while (i >= 0 && nums[i + 1] <= nums[i]) {
            i--;
        }
        if (i >= 0) {
            int j = nums.length - 1;
            while (j > i && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1);
    }


// 1) Compile-time (static) polymorphism :
function overloading or operator overloading.

//// Defination Of Copy Constructor : A copy constructor is a special type of constructor in a class that initializes a new object using the values of an existing object. It allows one object to be created as a copy of another object of the same type.

//The life cycle of an object in object-oriented programming- 
1. **Creation/Instantiation**:
2. **Initialization**:
3. **Usage**:
4. **Scope End**:
5. **Destruction**:

//// Destructor: Called automatically when an object goes out of scope or is destroyed.
    ~Demo(){
        cout << "Destructor Called" << endl;   // Just for the demonstration to show when the destructor is called
        delete c;  // Important: Releases the memory allocated on the heap for 'c' to prevent memory leaks
    }

// Constructor using an initialization list
    // Initialization lists are the proper way to initialize const member variables, member structures, or classes that do not have a default constructor.
    // This is because once the body of the constructor begins executing, all member variables have already been initialized.
    // So, if you don't set the value of 'const' member variable in the initialization list, you'll get a compilation error.
    ABC(int _a, int _b, int _c) : a(_a), b(_b), c(_c)
    {
        cout << "Initialization List constructor Called." << endl;
    }

// **Advantages of Doubly Linked List over the singly linked list:
In a singly linked list, to delete a node, a pointer to the previous node is needed. To get this previous node, sometimes the list is traversed. In DLL, we can get the previous node using the previous pointer. 

// **Disadvantages of Doubly Linked List over the singly linked list:
Every node of DLL Requires extra space for a previous pointer. It is possible to implement DLL with a single pointer though (See this and this). 
 All operations require an extra pointer previous to be maintained. For example, in insertion, we need to modify previous pointers together with the next pointers. For example in the following functions for insertions at different positions, we need 1 or 2 extra steps to set the previous pointer.

 // **Applications of Doubly Linked List:
// It is used by web browsers for backward and forward navigation of web pages 
// LRU ( Least Recently Used ) / MRU ( Most Recently Used ) Cache are constructed using Doubly Linked Lists. 
// Used by various applications to maintain undo and redo functionalities. 
// In Operating Systems, a doubly linked list is maintained by thread scheduler to keep track of processes that are being executed at that time.


//delete stack middle - 
void deleteMidHelper(stack<int>&s, int sizeOfStack, int mid){
        if(sizeOfStack == -1)return;
        
        if(sizeOfStack == mid){
            s.pop();
            return;
        }
        
        int temp = s.top();
        s.pop();
        
        deleteMidHelper(s,--sizeOfStack, mid);
        
        s.push(temp);
    }


//two implement two stack in a single array find check the  maximum no elements together possible in stacks
than implement one stack at start of array and one at end of array


//next smaller element 
 for (i=0 to n-1) {while (!stack.isEmpty() && stack.peek() > arr[i]){} push()}

//previous smaller element
for(i=n-1 to 0)  while (!stack.isEmpty() && stack.peek() >= arr[i]) push()

//'Generic Tree' :
A generic tree, or n-ary tree, is a tree where there''s no limit on the number of children a node can have. This type of tree is more flexible than a binary tree and can be used to represent more complex hierarchical structures.
'Ancestor': In a tree, an ancestor of a node is any node that appears on the path from the root to that node.
'Descendant': A descendant of a node is any node that can be reached by starting at that node and moving dowm the tree.
'Neighbours': In a tree, this term is less commonly used but can refer to nodes that are either siblings (share the same parent) or adjacent nodes in the tree''s graph representation.
'A skew tree': is a type of binary tree where all nodes are either left children or right children, resulting in a tree that is heavily unbalanced. In other words, a skew tree is a tree where every node has only one child, either a left child or a right child, but not both.


//public static void levelOrder(Node root) {
        if (root == null) return;

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            Node node = queue.poll();
            System.out.print(node.data + " ");

            if (node.left != null) queue.add(node.left);
            if (node.right != null) queue.add(node.right);
        }
    }


//